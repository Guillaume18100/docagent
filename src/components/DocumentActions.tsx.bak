import React, { useState } from 'react';
import { useDocumentContext } from '@/context/DocumentContext';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Badge } from "@/components/ui/badge";
import { 
  FileTextIcon, 
  FileIcon, 
  AlertCircleIcon, 
  CheckIcon, 
  ChevronDownIcon, 
  RefreshCwIcon,
  ArrowDownIcon,
  ScanIcon,
  LucideIcon,
  ListChecksIcon,
  BookOpenIcon,
  FilePenIcon,
  ScaleIcon,
  LanguagesIcon,
  ArrowRightIcon,
  MinusCircleIcon
} from 'lucide-react';

// Define document actions with descriptions and icons
const documentActions = [
  {
    id: 'summarize',
    label: 'Summarize Document',
    description: 'Create a concise summary of the document highlighting key points',
    prompt: 'Please provide a concise summary of this document highlighting the key points.',
    icon: BookOpenIcon,
    resultTitle: 'Document Summary'
  },
  {
    id: 'simplify',
    label: 'Simplify Language',
    description: 'Rewrite the document using simpler language while maintaining meaning',
    prompt: 'Please rewrite this document with simpler language while maintaining its meaning.',
    icon: FilePenIcon,
    resultTitle: 'Simplified Content'
  },
  {
    id: 'extract-action-items',
    label: 'Extract Action Items',
    description: 'Identify and list all tasks, action items, and next steps from the document',
    prompt: 'Please extract all action items, tasks, and next steps from this document.',
    icon: ListChecksIcon,
    resultTitle: 'Action Items'
  },
  {
    id: 'format-structure',
    label: 'Improve Structure',
    description: 'Suggest better formatting and structure to enhance readability',
    prompt: 'Please suggest a better format and structure for this document to improve readability.',
    icon: ScanIcon,
    resultTitle: 'Improved Structure'
  },
  {
    id: 'legal-analysis',
    label: 'Legal Analysis',
    description: 'Analyze legal aspects and highlight potential issues or concerns',
    prompt: 'Please provide a legal analysis of this document, highlighting potential issues or concerns.',
    icon: ScaleIcon,
    resultTitle: 'Legal Analysis'
  },
  {
    id: 'translate',
    label: 'Translate Document',
    description: 'Translate the document to another language while preserving context',
    prompt: 'Please translate this document to French while maintaining its meaning and context.',
    icon: LanguagesIcon,
    resultTitle: 'Translated Content'
  }
];

type ActionResult = {
  id: string;
  content: string;
  status: 'completed' | 'processing' | 'error';
  createdAt: Date;
};

const DocumentActions: React.FC = () => {
  const { currentDocument, documentAnalysis, isLoading, sendChatMessage, refreshDocumentAnalysis } = useDocumentContext();
  const [activeAction, setActiveAction] = useState<string | null>(null);
  const [processingAction, setProcessingAction] = useState<boolean>(false);
  const [actionResults, setActionResults] = useState<Record<string, ActionResult>>({});
  const [analysisProgress, setAnalysisProgress] = useState<number>(0);

  // Handle document analysis status
  const isAnalysisReady = documentAnalysis && documentAnalysis.status === 'completed';
  const isAnalysisProcessing = documentAnalysis && (documentAnalysis.status === 'processing' || documentAnalysis.status === 'pending');
  const isAnalysisFailed = documentAnalysis && documentAnalysis.status === 'failed';

  // Simulate progress for analysis
  React.useEffect(() => {
    let timer: NodeJS.Timeout;
    
    if (isAnalysisProcessing) {
      setAnalysisProgress(0);
      
      timer = setInterval(() => {
        setAnalysisProgress(prev => {
          const nextProgress = prev + Math.random() * 15;
          return nextProgress >= 90 ? 90 : nextProgress;
        });
      }, 1000);
    } else if (isAnalysisReady) {
      setAnalysisProgress(100);
    } else if (isAnalysisFailed) {
      setAnalysisProgress(0);
    }
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [isAnalysisProcessing, isAnalysisReady, isAnalysisFailed]);

  const handleActionSelect = async (actionId: string) => {
    if (isLoading || processingAction || !isAnalysisReady) return;
    
    const action = documentActions.find(act => act.id === actionId);
    if (!action) return;
    
    setActiveAction(actionId);
    setProcessingAction(true);
    
    // Create a temporary result with processing status
    setActionResults(prev => ({
      ...prev,
      [actionId]: {
        id: actionId,
        content: 'Processing your request...',
        status: 'processing',
        createdAt: new Date()
      }
    }));
    
    try {
      // This is where we would integrate with the API
      // For now, we'll simulate an API call with a timeout
      const response = await sendActionRequest(action.prompt);
      
      // Update with the completed result
      setActionResults(prev => ({
        ...prev,
        [actionId]: {
          id: actionId,
          content: response,
          status: 'completed',
          createdAt: new Date()
        }
      }));
    } catch (error) {
      console.error(`Error processing action ${actionId}:`, error);
      
      // Update with error result
      setActionResults(prev => ({
        ...prev,
        [actionId]: {
          id: actionId,
          content: 'An error occurred while processing your request. Please try again.',
          status: 'error',
          createdAt: new Date()
        }
      }));
    } finally {
      setProcessingAction(false);
    }
  };

  // Simulate API call
  const sendActionRequest = async (prompt: string): Promise<string> => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        try {
          // Real implementation would call the API service here
          resolve("This is a simulated response for the requested action. In a real implementation, this would contain the actual results of processing the document according to the selected action.");
        } catch (err) {
          reject(err);
        }
      }, 2000);
    });
  };

  return (
    <div className="flex flex-col h-full rounded-2xl border bg-card animate-fade-in shadow-sm overflow-hidden">
      <div className="border-b bg-muted/20 p-4">
        <h2 className="text-lg font-medium">Document Actions</h2>
        <p className="text-sm text-muted-foreground">
          Select an action to process your document
        </p>
      </div>
      
      <ScrollArea className="flex-1 p-4">
        {!currentDocument ? (
          <div className="h-full flex flex-col items-center justify-center text-center p-4 space-y-3">
            <div className="bg-muted p-3 rounded-full">
              <FileIcon className="h-6 w-6 text-muted-foreground" />
            </div>
            <div>
              <h3 className="font-medium">No document uploaded</h3>
              <p className="text-sm text-muted-foreground">
                Upload a document to start processing
              </p>
            </div>
          </div>
        ) : !documentAnalysis ? (
          <div className="h-full flex flex-col items-center justify-center text-center p-4 space-y-3">
            <div className="bg-orange-100 p-3 rounded-full">
              <AlertCircleIcon className="h-6 w-6 text-orange-500" />
            </div>
            <div>
              <h3 className="font-medium">Document needs analysis</h3>
              <p className="text-sm text-muted-foreground">
                Your document needs to be analyzed before actions can be performed
              </p>
            </div>
            <Button
              variant="default"
              size="sm"
              onClick={refreshDocumentAnalysis}
              disabled={isLoading}
            >
              <ScanIcon className="h-4 w-4 mr-2" />
              Start Analysis
            </Button>
          </div>
        ) : isAnalysisProcessing ? (
          <div className="h-full flex flex-col items-center justify-center text-center p-4 space-y-4">
            <div className="bg-blue-100 p-3 rounded-full">
              <FileTextIcon className="h-6 w-6 text-blue-500 animate-pulse" />
            </div>
            <div>
              <h3 className="font-medium">Analyzing your document</h3>
              <p className="text-sm text-muted-foreground mb-2">
                Please wait while we prepare your document for actions
              </p>
              <Progress value={analysisProgress} className="w-64 h-2" />
              <p className="text-xs text-muted-foreground mt-2">
                {analysisProgress.toFixed(0)}% complete
              </p>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={refreshDocumentAnalysis}
              disabled={isLoading}
            >
              <RefreshCwIcon className="h-4 w-4 mr-2" />
              Check Status
            </Button>
          </div>
        ) : isAnalysisFailed ? (
          <div className="h-full flex flex-col items-center justify-center text-center p-4 space-y-3">
            <div className="bg-red-100 p-3 rounded-full">
              <AlertCircleIcon className="h-6 w-6 text-red-500" />
            </div>
            <div>
              <h3 className="font-medium">Analysis failed</h3>
              <p className="text-sm text-muted-foreground">
                {documentAnalysis.error_message || "Something went wrong during analysis"}
              </p>
            </div>
            <Button
              variant="default"
              size="sm"
              onClick={refreshDocumentAnalysis}
              disabled={isLoading}
            >
              <RefreshCwIcon className="h-4 w-4 mr-2" />
              Retry Analysis
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Analysis Status Card */}
            <Card className="bg-green-50 border-green-200">
              <CardContent className="p-4">
                <div className="flex items-center">
                  <CheckIcon className="h-5 w-5 text-green-500 mr-2" />
                  <div>
                    <h3 className="font-medium text-green-700">Document Analysis Complete</h3>
                    <p className="text-sm text-green-600">
                      Your document has been successfully analyzed and is ready for processing
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            {/* Action Cards */}
            <div className="text-sm font-medium mb-2">Available actions:</div>
            <div className="space-y-3">
              {documentActions.map((action) => {
                const result = actionResults[action.id];
                const isActive = activeAction === action.id;
                const hasResult = !!result;
                
                return (
                  <Collapsible 
                    key={action.id}
                    open={isActive}
                    onOpenChange={(open) => {
                      if (open) {
                        setActiveAction(action.id);
                      } else if (isActive) {
                        setActiveAction(null);
                      }
                    }}
                    className="border rounded-lg overflow-hidden"
                  >
                    <div className="flex items-center justify-between p-4 bg-card">
                      <div className="flex items-center space-x-3">
                        <div className="bg-primary/10 p-2 rounded-md">
                          <action.icon className="h-5 w-5 text-primary" />
                        </div>
                        <div>
                          <h3 className="font-medium">{action.label}</h3>
                          <p className="text-sm text-muted-foreground">{action.description}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        {hasResult && result.status === 'completed' && (
                          <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200">
                            <CheckIcon className="h-3 w-3 mr-1" />
                            Complete
                          </Badge>
                        )}
                        
                        {hasResult && result.status === 'error' && (
                          <Badge variant="outline" className="bg-red-100 text-red-800 border-red-200">
                            <AlertCircleIcon className="h-3 w-3 mr-1" />
                            Error
                          </Badge>
                        )}
                        
                        <CollapsibleTrigger asChild>
                          <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                            <ChevronDownIcon className={`h-4 w-4 transition-transform ${isActive ? 'transform rotate-180' : ''}`} />
                          </Button>
                        </CollapsibleTrigger>
                      </div>
                    </div>
                    
                    <CollapsibleContent>
                      <div className="p-4 bg-muted/30 border-t">
                        {!hasResult ? (
                          <div className="flex flex-col items-center justify-center py-4 space-y-3">
                            <p className="text-sm text-muted-foreground">
                              Start processing to see results
                            </p>
                            <Button
                              onClick={() => handleActionSelect(action.id)}
                              disabled={isLoading || processingAction}
                              className="w-full sm:w-auto"
                            >
                              <ArrowRightIcon className="h-4 w-4 mr-2" />
                              Process Document
                            </Button>
                          </div>
                        ) : result.status === 'processing' ? (
                          <div className="flex flex-col items-center justify-center py-4 space-y-3">
                            <Skeleton className="h-4 w-32 animate-pulse" />
                            <Skeleton className="h-4 w-48 animate-pulse" />
                            <Skeleton className="h-4 w-40 animate-pulse" />
                          </div>
                        ) : (
                          <div className="space-y-3">
                            <div className="flex items-center justify-between">
                              <h4 className="font-medium text-sm">{action.resultTitle}</h4>
                              <Badge variant="outline" className="text-xs">
                                {new Date(result.createdAt).toLocaleString()}
                              </Badge>
                            </div>
                            <div className="p-3 bg-white rounded-md border whitespace-pre-wrap text-sm">
                              {result.content}
                            </div>
                            <div className="flex justify-end">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleActionSelect(action.id)}
                                disabled={isLoading || processingAction}
                              >
                                <RefreshCwIcon className="h-3 w-3 mr-2" />
                                Regenerate
                              </Button>
                            </div>
                          </div>
                        )}
                      </div>
                    </CollapsibleContent>
                  </Collapsible>
                );
              })}
            </div>
          </div>
        )}
      </ScrollArea>
    </div>
  );
};

export default DocumentActions;
